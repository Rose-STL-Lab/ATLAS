[monocurl version: "0.1.0" type: "scene"]

[slide name: "config"]
	background = WHITE
	camera = Camera:
		near: 0.1 
		far: 10
		up: {0,1,0}
		origin: {0,0,4}
		target: {0,0,0}
		
	
		
	var color_schemes = {}
	color_schemes += {0: YELLOW, 3: GRAY, 6: RED}
	color_schemes += {0: GREEN, 3: BLUE, 6: PURPLE}
	color_schemes += {0: YELLOW, 3: ORANGE, 6: RED}
	color_schemes += {0: RED, 6: BLUE}
	color_schemes += {0: BLACK, 6: WHITE}
	color_schemes += {0: WHITE, 6: PURPLE}
		
	let matrix_color_scheme = color_schemes[5]
	let coset_variation = 3
	let coset_use_line = 0
	
	func Box(text, color, tc, w, h, tag, pos) = identity:
		var ret = {}
		ret += Rect:
			center: pos
			width: w
			height: h
			tag: tag
			stroke: LIGHT_GRAY
			fill: color
		ret += Centered:
			mesh: Text:
				text: "\begin{center} %{text} \end{center}"
				scale: 0.5
				stroke: tc
				fill: tc
			at: pos
		element: ret
	
	let mat_size = 0.12
	func Matrix(mat, tag) = identity:
		let size = mat_size
		func val_to_col(val) = identity:
			element: keyframe_lerp(matrix_color_scheme, val + coset_variation)
			
		var sum = 0
		var ret = {}
		let height = len(mat)
		let width = len(mat[0])
		for i in 0 :< len(mat)
			for j in 0 :< len(mat[i])
				let re = mat[i][j]
				ret += Rect:
					center: {(j + 0.5) * size, (height - i - 0.5) * size, 0}
					width: size
					height: size
					tag: tag
					stroke: CLEAR
					fill: val_to_col(re)
		ret += Rect:
			center: {width * size / 2, height * size / 2, 0}
			width: width * size
			height: height * size
			tag: tag
			stroke: BLACK
		element: ret
	
	let colors = {-10: GRAY, 0.2:YELLOW, 0.5: ORANGE, 0.6:RED}
	func Chart(tag, pos, mag(u, v), i_hat, j_hat) = identity:	
		var ret = {}
		ret += Rect:
			center: {0, 0, 0}
			width: 1
			height: 1
			tag: tag
			stroke: BLUE
			fill: {1, 1, 1, 0.3}
		/* grid lines */
		let count = 7
		for i in 0 :< count
			let pos = (i + 1) / (count + 1) - 0.5
			ret += Line:
				start: {-0.5, pos, 0}
				end: {0.5, pos, 0}
				tag: {}
				stroke: LIGHT_GRAY
			ret += Line:
				start: {pos, -0.5, 0}
				end: {pos, 0.5, 0}
				tag: {}
				stroke: LIGHT_GRAY
		/* main circle */
		let r = 0.35
		let circle = ColorGrid:
			x_min: -0.5
			x_max: 0.5
			y_min: -0.5
			y_max: 0.5
			x_step: 0.010001
			y_step: 0.010001
			mask(pos): norm(pos) < r
			tag: {}
			color_at(pos): keyframe_lerp(colors, mag(pos[0], pos[1]))
			stroke: CLEAR
		
		ret += Circle:
			center: ORIGIN
			radius: r
			tag: {}
			stroke: DARK_GRAY
			fill: DARK_GRAY
		ret += Shifted:
			mesh: circle
			delta: {0, 0, 0.0036}
		let k_hat = normalize(cross_product(j_hat, i_hat))
		ret = PointMapped:
			mesh: ret
			point_map(point): identity:
				let i = vec_mul(point[0], i_hat)
				let j = vec_mul(point[1], j_hat)
				let k = vec_mul(point[2], k_hat)
				element: vec_add(vec_add(i, j), k)
		ret = Shifted:
			mesh: ret
			delta: pos
		element: ret
	
	
	let uv_base = ColorGrid:
		x_min: 0
		x_max: 1
		y_min: 0
		y_max: 1
		x_step: 0.02
		y_step: 0.02
		tag: {}
		func color(pos) = identity:
			let r = round(pos[0] / 0.05)
			let c = round(pos[1] / 0.05)
			var col = {0.2, 0.6, 1, 1}
			
			element: GRAY
		color_at(pos): color(pos)
		stroke: CLEAR
	let r1 = 0.75
	let r2 = 0.35
	func torus_map(u_raw, v_raw, r1, r2) = identity:
		let u = u_raw * TAU
		let v = v_raw * TAU
		let x = (r1 + r2 * cos(v)) * cos(u)
		let y = (r1 + r2 * cos(v)) * sin(u)
		let z = r2 * sin(v)
		element: {x, z, y}
	
	func Torus(mag(u, v), chart_locs, pos) = identity:
		var torus = ColorMapped:
			mesh: uv_base
			color_map(point): identity:
				let m = mag(point[0], point[1])
				element: keyframe_lerp(colors, m)
		torus = PointMapped:
			mesh: torus
			point_map(point): torus_map(point[0], point[1], r1, r2)
		torus = AddedGloss:
			mesh: torus
		var ret = {torus}
		var i = 0
		for loc in chart_locs
			i += 1
			var area = Circle:
				center: {loc[0], loc[1], 0}
				radius: 0.03
				tag: {i}
				stroke: DARK_GRAY
			area = Scaled:
				mesh: area
				scale: {1, 3, 1}
			area = PointMapped:
				mesh: area
				point_map(point): torus_map(point[0], point[1], r1, r2 + 0.005)
			ret += area
			
			let u = (loc[0]) * TAU
			let v = loc[1] * TAU
			
			let u_scale = 0.5 / 0.35 * 0.03 * 2
			let v_scale = 3 * u_scale
			var chart = Chart:
				tag: {i}
				pos: torus_map(loc[0] + loc[3], loc[1], r1, r2 * loc[2])
				mag(u, v): mag(loc[0] + u * u_scale, loc[1] + v * v_scale)
				i_hat: vec_mul({-sin(u), 0, cos(u)}, 0.5)
				j_hat: vec_mul({-cos(u) * sin(v), cos(v), -sin(u) * sin(v)}, 0.5)
			ret += chart
		ret = Rotated:
			mesh: ret
			rotation: {0.9, 0, 0}
		ret = Shifted:
			mesh: ret
			delta: pos
		element: ret
[slide name: "slide_1"]
	/* Infinitesimal Generators */
	
	tree basis_box = Box:
		text: "\textbf{Basis} \\ $(B_1, B_2, \ldots, B_k)$ "
		color: BLUE
		tc: WHITE
		w: 3
		h: 1
		tag: {}
		pos: {-1.75, 1, 0}
	tree coeff_box = Box:
		text: "\textbf{Random Coefficients} \\ $\eta \sim \mathcal{N}(0, I) $ "
		color: WHITE
		tc: BLACK
		w: 3
		h: 1
		tag: {}
		pos: {-1.75, -1, 0}
	
	tree ds_box = Box:
		text: "\textbf{Dataset}"
		color: GREEN
		tc: BLACK
		w: 0.8
		h: 0.5
		tag: {}
		pos: {2, 1.2, 0}
	
	tree loss_box = Box:
		text: "\textbf{Loss} \\ $| f(g * x) - g * f(x) |$"
		color: RED
		tc: WHITE
		w: 2
		h: 1
		tag: {}
		pos: {2, 0, 0}
	
	func Term(tex) = Tex:
		tex: tex
		scale: 0.5
		stroke: CLEAR
		fill: BLACK
	
	tree eqn = {}
	eqn += Term("\exp \big( \pin1{\eta_1}")
	eqn = {} + Centered:
		mesh: eqn
		at: {-3, 0, 0}
	
	eqn += Matrix:
		mat: {{0, 1, 0}, {-1, 0, 0}, {0, 0, 0}}
		tag: {-1}
	eqn += Term("+ \ \pin2{\eta_2}")
	eqn += Matrix:
		mat: {{0, 0, 1}, {0, 0, 0}, {-1, 0, 0}}
		tag: {-2}
	eqn += Term("\ldots \ \pin3{\eta_k}")
	eqn += Matrix:
		mat: {{0, 0, 0}, {0, 0, 1}, {0, -1, 0}}
		tag: {-3}
	eqn += Term:
		tex: "\big) = "
	eqn += Matrix:
		mat: {{-1, -0.3, 0}, {0.3, -1, 0}, {0, 0, 1}}
		tag: {}
	eqn += Tex:
		tex: "\rightarrow{\bf{g}}"
		scale: 0.5
		stroke: CLEAR
		fill: BLACK
	eqn = XStack:
		mesh_vector: eqn
		align: center
	
	
	tree down_arrows = {}
	tree up_arrows = {}
	
	let r_t = mesh_up(coeff_box)
	let b_b = mesh_down(basis_box)
	for i in {1, 2, 3}
		let m = mesh_select:
			root: eqn
			tag_predicate(tag): -i in tag
		let n = mesh_select:
			root: eqn
			tag_predicate(tag): i in tag
		let mx = (mesh_center(m))[0]
		let mt = mesh_up(m)
		let nx = (mesh_center(n))[0]
		let nb = mesh_down(n)
		up_arrows += Arrow:
			start: {mx, b_b - 0.05, 0}
			end: {mx, mt + 0.05, 0}
			tag: {}
			stroke: CLEAR
			fill: LIGHT_GRAY
		down_arrows += Arrow:
			start: {nx, r_t + 0.05, 0}
			end: {nx, nb - 0.05, 0}
			tag: {}
			stroke: CLEAR
			fill: LIGHT_GRAY
	
	tree x_arrow = Tex:
		tex: "\stackrel{\downarrow}{\raisebox{-1.2ex}{\bf x}}"
		scale: 0.5
		stroke: CLEAR
		fill: BLACK
	x_arrow = MovedNextTo:
		mesh: x_arrow
		ref: ds_box
		dir: DOWN
	
	
	p += Set:
		vars&: {basis_box, coeff_box, eqn, up_arrows, down_arrows, ds_box, loss_box, x_arrow}
	basis_box = coeff_box = eqn = up_arrows = down_arrows = ds_box = loss_box = x_arrow = {}
	
	p += Wait(1)
	p += Set:
		vars&: {basis_box, coeff_box, eqn, up_arrows, down_arrows, ds_box, loss_box, x_arrow}
[slide name: "slide_2"]
	/* Cosets */
	
	let num_mats = 8
	let coset_bg = {255, 230, 209, 255}
	let ds_bg = {255, 230, 209, 255}
	let loss_bg = {255, 209, 209, 255}
	func rgb(x) = vec_mul(1/255, x)
	
	
	func Mat(matrix) = identity:
		element: Matrix:
			mat: matrix
			tag: {}
	func CosetRing(at, matrices, label) = identity:
		var ret = {}
		let n = len(matrices)
		let r = 0.4
		ret = {}
		for i in 0 :< n
			let theta = (i + n / 4 + 1) / n * TAU
			let x = at[0] + cos(theta) * r
			let y = at[1] + sin(theta) * r
			ret += Centered:
				mesh: Mat:
					matrix: matrices[i]
				at: {x, y, 0}
		ret += Centered:
			mesh: Text:
				text: label
				scale: 0.5
				stroke: BLACK
				fill: BLACK
			at: at
		if coset_use_line		
			ret = {}
			for i in 0 :< 3
				ret += Centered:
					mesh: Mat:
						matrix: matrices[i]
					at: ORIGIN
			ret = YStack:
				mesh_vector: ret
				align: center
			ret = {ret} + Text:
				text: label
				scale: 0.5
				stroke: BLACK
				fill: BLACK
			ret = Centered:
				mesh: Stack:
					mesh_vector: ret
					dir: DOWN
					align: center
				at: at
		element: ret
	
	var mats = {}
	for i in 0 :< num_mats
		let a = coset_variation
		mats += {{random(-a,a), random(-a,a)}, {random(-a,a), random(-a,a)}}
	tree coset_box = Box:
		text: ""
		color: rgb(coset_bg)
		tc: BLACK
		w: 1.5
		h: 1.75
		tag: {}
		pos: {-2.7, 0.15, 0}
	coset_box += CosetRing:
		at: vec_sub(coset_box.pos, {0, 0.15, 0})
		matrices: mats
		label: "$C_{1 .. K}$"
	coset_box += Centered:
		mesh: Text:
			text: "\textbf{Cosets}"
			scale: 0.5
			stroke: BLACK
			fill: BLACK
		at: {(mesh_center(coset_box))[0], 0.8, 0}
	ds_box = Box:
		text: "\textbf{Dataset}"
		color: rgb(ds_bg)
		tc: BLACK
		w: 0.8
		h: 0.5
		tag: {}
		pos: {2, 1.2, 0}
	
	loss_box = Box:
		text: "{\textbf{Loss}} $$ \sum_{\ell, c} \mathcal{L}(\Phi_{c}(g_{\ell} \cdot x), g_{\ell} \cdot \Phi_{c}(x))$$"
		color: rgb(loss_bg)
		tc: BLACK
		w: 2.2
		h: 1
		tag: {}
		pos: {2, 0, 0}
	
	x_arrow = Tex:
		tex: "\stackrel{\downarrow}{\raisebox{-1.2ex}{\bf x}}"
		scale: 0.5
		stroke: BLACK
		fill: BLACK
	x_arrow = MovedNextTo:
		mesh: x_arrow
		ref: ds_box
		dir: DOWN
	
	var normed_mats = map:
		v: mats
		f(x): identity:
			var det = sqrt(abs(x[0][0] * x[1][1] - x[0][1] * x[1][0]))
			element: {vec_mul(1/det, x[0]), vec_mul(1/det, x[1])}
	
	eqn = {}
	eqn += Centered:
		mesh: Text:
			text: "$\to$ normalize $\to$"
			scale: 0.5
			stroke: BLACK
			fill: BLACK
		at: {-1.25, 0, 0}
	eqn += CosetRing:
		at: ORIGIN
		matrices: normed_mats
		label: "$g_{\ell}$"
	eqn += Text:
		text: "$\to$"
		scale: 0.5
		stroke: BLACK
		fill: BLACK
	eqn = XStack:
		mesh_vector: eqn
		align: center
	p += Set:
		vars&: {ds_box, coset_box, loss_box, x_arrow, eqn}
	
	p += Wait(1)
	
	ds_box = coset_box = loss_box = x_arrow = eqn = {}
	p += Set:
		vars&: {ds_box, coset_box, loss_box, x_arrow, eqn}
[slide name: "slide_3"]
	/* Sigma depiction (heat experiment) */
	
	func f(x, y) = identity:
		let u = x * TAU
		let v = y * TAU
		let x = r1 * cos(u)
		let y = r1 * sin(u)
		let z = r2 * sin(v)
		let a = 4
		element: norm({-(y + x) * (-z + y + x) / a, z + (y - x) / a, z})
	
	/* not actual heat simulation, but average of neighbors is good enough */
	func fp(u, v) = identity:
		var ret = 0
		let d = 0.125
		for i in {-d, 0, d}
			for j in {-d, 0, d}
				ret += f(u + i, v + j) / 9
		element: ret
	
	
	let locs = {{0.25, 0.15, 2, 0}, {-0.05, 0.25, 1.5, 0}, {0.75, 0.23, 3.65, 0.05}}
	let locs2 = {{0.25, 0.15, 2, 0}, {-0.05, 0.25, 1.5, 0}, {0.75, 0.23, 3.6, -0.03}}
	tree left = Torus:
		mag(u, v): f(u, v)
		chart_locs: locs
		pos: {-2, -0, 0}
	tree right = Torus:
		mag(u, v): fp(u, v)
		chart_locs: locs2
		pos: {2, -0, 0}
	func Tx(tex, scale, at, col) = identity:
		var ret = Tex:
			tex: tex
			scale: scale
			stroke: col
			fill: col
		ret = Centered:
			mesh: ret
			at: at
		element: ret
	
	var starts = {{-1.5, 1.775, 0}, {-1.65, -0.475, 1}, {-0.76, 0.65, 1}}
	var ends = {  {1.57, 1.8, 0}, {1.64, -0.5, 1}, {1.73, 0.63, 1}}
	var arcs = {-0.2, 0.3, -0.15}
	tree arrows = {}
	for i in 0 :< len(starts)
		arrows += Arrow:
			start: starts[i]
			end: ends[i]
			normal: {0, 0, 1}
			path_arc: arcs[i]
			tag: {}
			let g = 0.5
			stroke: CLEAR
			fill: {g, g, g, 0.4}
	arrows += Arrow:
		start: {-0.85, 0, 0}
		end: {0.85, 0, 0}
		normal: {0, sin(0.9), cos(0.9)}
		path_arc: 0
		tag: {}
		stroke: BLACK
		fill: BLACK
	
	tree projs = {}
	projs += Text:
		text: "\begin{center} \raisebox{0.9ex}{$\uparrow$} \\ $(\varphi_{3}^{-1})^{*}$ \end{center}"
		scale: 0.45
		stroke: BLACK
		fill: BLACK
	projs += projs[0]
	projs[0] = Shifted:
		mesh: projs[0]
		delta: {-1.975, 1.55, 0}
	projs[0] = Rotated:
		mesh: projs[0]
		rotation: {0.5, 0.3, 0}
	projs[1] = Shifted:
		mesh: projs[1]
		delta: {1.6, 1.55, 0}
	projs[1] = Rotated:
		mesh: projs[1]
		rotation: {0.6, -0.2, 0}
	
	let sb_col = {0.2, 0.2, 0.2, 1}
	tree labels = {} + Tx:
		tex: "\text{\small global map } \sigma \mapsto"
		scale: 2.25
		at: {0, -1.7, 0}
		col: BLACK
	labels += Rotated:
		mesh: Tx:
			tex: "\Phi"
			scale: 1.5
			at: {0, 0.225, 0}
			col: BLACK
		rotation: {-0.8, 0, 0}
	labels += Rotated:
		mesh: Tx:
			tex: "\text{global map}"
			scale: 0.75
			at: {0, -0.175, 0}
			col: sb_col
		rotation: {-0.8, 0, 0}
	labels += Tx:
		tex: "\Phi_3"
		scale: 0.6
		at: {0.1, 2.0, 0}
		col: BLACK
	var burn = {}
	burn += Tx:
		tex: "\text{local map}"
		scale: 0.45
		at: {0.1, 1.75, 0}
		col: sb_col
	labels += Tx:
		tex: "\text{} \Phi_2"
		scale: 0.6
		at: {0.2, 1.05, 0}
		col: BLACK
	labels += Tx:
		tex: "\text{} \Phi_1"
		scale: 0.6
		at: {-0.2, -0.67, 0}
		col: BLACK
	labels += Tx:
		tex: "\text{local map}"
		scale: 0.45
		at: {-0.2, -0.93, 0}
		col: sb_col
	burn += Tx:
		tex: "\text{local map}"
		scale: 0.45
		at: {0.2, 0.78, 0}
		col: sb_col
	labels += Tx:
		tex: "\text{input chart}"
		scale: 0.45
		at: {-2.55, -0.85, 0}
		col: sb_col
	labels += Tx:
		tex: "\text{output chart}"
		scale: 0.45
		at: {2.55, -0.85, 0}
		col: sb_col
	p += Set:
		vars&: {left, right, labels, arrows, projs}
	
	left = right = labels = arrows = projs = {}
	p += Wait(1)
	p += Set:
		vars&: {left, right, labels, arrows, projs}
[slide name: "slide_6"]
	/* Atlas Equivariance Commutative Diagram */
	
	tree x = Chart:
		tag: {}
		pos: {-1.25, 1.25, 0}
		mag(u, v): f(u, v)
		i_hat: LEFT
		j_hat: UP
	tree fx = Chart:
		tag: {}
		pos: {-1.25, -1.25, 0}
		mag(u, v): fp(u, v)
		i_hat: LEFT
		j_hat: UP
	tree gx = Chart:
		tag: {}
		pos: {1.25, 1.25, 0}
		mag(u, v): f(-v, u)
		i_hat: LEFT
		j_hat: UP
	tree fgx = Chart:
		tag: {}
		pos: {1.25, -1.25, 0}
		mag(u, v): fp(-v, u)
		i_hat: LEFT
		j_hat: UP
	arrows = {}
	arrows += Arrow:
		start: x
		end: fx
		tag: {}
		stroke: CLEAR
		fill: DARK_GRAY
	arrows += Arrow:
		start: x
		end: gx
		tag: {}
		stroke: CLEAR
		fill: DARK_GRAY
	arrows += Arrow:
		start: fx
		end: fgx
		tag: {}
		stroke: CLEAR
		fill: DARK_GRAY
	arrows += Arrow:
		start: gx
		end: fgx
		tag: {}
		stroke: CLEAR
		fill: DARK_GRAY
	labels = {}
	labels += Label:
		mesh: arrows
		str: "$g$"
		scale: 0.75
		dir: UP
		stroke: BLACK
		fill: BLACK
	labels += Label:
		mesh: arrows
		str: "$\Phi_c$"
		scale: 0.75
		dir: LEFT
		stroke: BLACK
		fill: BLACK
	labels += Label:
		mesh: arrows
		str: "$g$"
		scale: 0.75
		dir: DOWN
		stroke: BLACK
		fill: BLACK
	labels += Label:
		mesh: arrows
		str: "$\Phi_c$"
		scale: 0.75
		dir: RIGHT
		stroke: BLACK
		fill: BLACK
	labels += Label:
		mesh: {x, gx}
		str: "input charts"
		scale: 0.75
		dir: UP
		stroke: sb_col
		fill: sb_col
	labels += Label:
		mesh: {fx, fgx}
		str: "output charts"
		scale: 0.75
		dir: DOWN
		stroke: sb_col
		fill: sb_col
	p += Set:
		vars&: {x, fx, gx, fgx, arrows, labels}
	x = fx = gx = fgx = arrows = labels = {}
	p += Wait(1)
	p += Set:
		vars&: {x, fx, gx, fgx, arrows, labels}
[slide name: "slide_5"]
	func FeatureField(pos, col) = identity:
	
		var ret = {}
		func color(x) = identity:
			element: {0.5, (1+x[2])/2, (1+x[1])/2, 1}
		func map(u, v) = identity:
			let x = sin(v) * cos(u)
			let y = sin(v) * sin(u)
			let z = cos(v)
			element: {x, z, y}
		var uv = ColorGrid:
			x_min: 0
			x_max: 1
			y_min: 0
			y_max: 1
			x_step: 0.011
			y_step: 0.011
			tag: {}
			color_at(pos):  color(map(pos[0], pos[1]))
			stroke: CLEAR
		ret += PointMapped:
			mesh: uv
			point_map(point): identity:
				let u = point[0] * TAU
				let v = point[1] * PI
				element: map(u, v)
		ret[0] = PointMapped:
			mesh: ret[0]
			point_map(point): identity:
				
				element: point
		ret[0] = AddedGloss:
			mesh: ret[0]
		ret[0] = Shifted:
			mesh: ret[0]
			delta: pos
		element: ret
	
	let COLORS = {0.2:YELLOW, 1: RED}
	func VF(pos, mag, rot, col_boost) = identity:
		func f(x, y, z) = cross_product({x,y,z}, {0,0,1}) 
		var ret = {}
		let n = 8
		let m = 13
		for i in 0 :< n
			for j in 0:< m
				let u = (i+0.8) / n * TAU
				let v = (j+0.8) / m * PI
				let x = sin(v) * cos(u)
				let y = cos(v)
				let z = sin(v) * sin(u)
				if norm(vec_sub({x,y,z}, {0,1,0})) < mag || norm(vec_sub({x,y,z}, {0,-1,0})) < mag			
					ret += Vector:
						let raw = f(x,z,y))
						let n = max(0.4, norm(raw))
						let scaled = vec_mul(0.3 / n, raw)
						tail: vec_add({x,z,y}, pos)
						delta: scaled
						tag: {}
						stroke: CLEAR
						fill: keyframe_lerp(COLORS, norm(raw) + 0.1 * (2 - mag) + col_boost)
		let com = mesh_center(ret)
		ret = Rotated:
			mesh: ret
			rotation: rot
		element: ret
		
	tree lsphere = FeatureField:
		pos: {-1.5, 0, 0}
		col: GRAY
	lsphere += VF:
		pos: lsphere.pos
		mag: 2
		rot: {-0.4, 0, 0}
		col_boost: 0
	tree rsphere = FeatureField:
		pos: {1.5, 0, 0}
		col: BLUE
	var q = rsphere.pos
	rsphere += VF:
		pos: q
		mag: 0.6
		rot: {0,-0.1,0}
		col_boost: 0.1
	p += Set:
		vars&: {lsphere, rsphere}
